# -*- coding: utf-8 -*-
"""Data_Mining_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YZr1o7R-t8KCnzgrecW8ZXLRHjuyRLDk
"""

import pandas as pd

# Load the dataset (assuming you've downloaded and uploaded it)
df = pd.read_csv('/content/weight-height.csv')

# Display the first few rows of the dataset
df.head()

from google.colab import drive
drive.mount('/content/drive')

# Check for missing values
print(df.isnull().sum())

# Check the data types
print(df.dtypes)

# Summary statistics
print(df.describe())

# Encode 'Gender' as numerical values (Male=0, Female=1)
df['Gender'] = df['Gender'].map({'Male': 0, 'Female': 1})

# Split into features (X) and target (y)
X = df[['Gender', 'Height']]
y = df['Weight']

from sklearn.model_selection import train_test_split

# Split the data into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Calculate Q1 (25th percentile) and Q3 (75th percentile) for 'Height' and 'Weight'
Q1 = df[['Height', 'Weight']].quantile(0.25)
Q3 = df[['Height', 'Weight']].quantile(0.75)

# Calculate IQR (Interquartile Range)
IQR = Q3 - Q1

# Define the lower and upper bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Detect outliers in the dataset
outliers = ((df[['Height', 'Weight']] < lower_bound) | (df[['Height', 'Weight']] > upper_bound)).any(axis=1)

# Show the rows containing outliers
outlier_data = df[outliers]
print("Outliers detected:")
print(outlier_data)

# Remove the rows that contain outliers
df_cleaned = df[~outliers]

# Verify the result by showing the first few rows
print(df_cleaned.head())

# Apply the capping for both 'Height' and 'Weight' columns
df_cleaned['Height'] = df_cleaned['Height'].clip(lower=lower_bound['Height'], upper=upper_bound['Height'])
df_cleaned['Weight'] = df_cleaned['Weight'].clip(lower=lower_bound['Weight'], upper=upper_bound['Weight'])

# Verify the result by showing the first few rows
print(df_cleaned.head())

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Define the features and target
X = df_cleaned[['Height', 'Weight']]
y = df_cleaned['Gender']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train the model
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train_scaled, y_train)

# Predict on the test set
y_pred = clf.predict(X_test_scaled)

# Calculate accuracy and classification report
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")
print("Classification Report:")
print(classification_report(y_test, y_pred))

import matplotlib.pyplot as plt
import seaborn as sns

# Plotting before capping (Outliers detected)
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.boxplot(x='Gender', y='Height', data=df)
plt.title('Height Distribution Before Capping (Outliers)')

plt.subplot(1, 2, 2)
sns.boxplot(x='Gender', y='Weight', data=df)
plt.title('Weight Distribution Before Capping (Outliers)')

plt.tight_layout()
plt.show()

# Plotting after capping (After handling outliers)
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.boxplot(x='Gender', y='Height', data=df_cleaned)
plt.title('Height Distribution After Capping')

plt.subplot(1, 2, 2)
sns.boxplot(x='Gender', y='Weight', data=df_cleaned)
plt.title('Weight Distribution After Capping')

plt.tight_layout()
plt.show()

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Generate confusion matrix
y_pred = clf.predict(X_test)
cm = confusion_matrix(y_test, y_pred)

# Plot the confusion matrix
plt.figure(figsize=(6, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])
plt.title('Confusion Matrix')
plt.ylabel('True label')
plt.xlabel('Predicted label')
plt.show()